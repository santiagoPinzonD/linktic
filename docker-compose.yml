version: '3.8'

services:
  # Base de datos para productos
  productos-db:
    image: postgres:15  # Cambiar de alpine a estándar
    container_name: productos-db
    environment:
      POSTGRES_DB: productos_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      # Configurar locales explícitamente
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      POSTGRES_INITDB_ARGS: "--locale=C.UTF-8"
    volumes:
      - productos-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d productos_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Base de datos para inventario
  inventario-db:
    image: postgres:15  # Cambiar de alpine a estándar
    container_name: inventario-db
    environment:
      POSTGRES_DB: inventario_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      # Configurar locales explícitamente
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      POSTGRES_INITDB_ARGS: "--locale=C.UTF-8"
    volumes:
      - inventario-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d inventario_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Servicio de productos
  productos-service:
    build:
      context: ./productos-service
      dockerfile: Dockerfile
    container_name: productos-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://productos-db:5432/productos_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin123
      API_KEY: secret-key
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      productos-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Servicio de inventario
  inventario-service:
    build:
      context: ./inventario-service
      dockerfile: Dockerfile
    container_name: inventario-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://inventario-db:5432/inventario_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin123
      PRODUCTOS_SERVICE_URL: http://productos-service:8081
      PRODUCTOS_API_KEY: secret-key
      API_KEY: secret-key
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      inventario-db:
        condition: service_healthy
      productos-service:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  microservices-network:
    driver: bridge
    name: microservices-network

volumes:
  productos-data:
  inventario-data: